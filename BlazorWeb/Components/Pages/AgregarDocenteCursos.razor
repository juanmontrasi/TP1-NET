@page "/agregar-docentecurso"
@using Entidades
@inject DocenteCursosApi docenteCursosApi
@inject NavigationManager NavigationManager

<h3>Agregar Docente Curso</h3>

<EditForm Model="nuevoDocenteCurso" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label for="idPersona">Docente:</label>
        <InputSelect id="idPersona" @bind-Value="nuevoDocenteCurso.IdPersona">
            <option value="">Seleccionar Docente</option>
            @foreach (var persona in personas)
            {
                <option value="@persona.IdPersona">@persona.Nombre</option>
            }
        </InputSelect>
    </div>

    <div>
        <label for="idCurso">Curso:</label>
        <InputSelect id="idCurso" @bind-Value="nuevoDocenteCurso.IdCurso">
            <option value="">Seleccionar Curso</option>
            @foreach (var curso in cursos)
            {
                <option value="@curso.IdCurso">@curso.Nombre</option>
            }
        </InputSelect>
    </div>

    <div>
        <label>Cargo:</label>
        <InputCheckbox id="cargoTeoria" @bind-Value="isCargoTeoria" /> Teoría
        <InputCheckbox id="cargoPractica" @bind-Value="isCargoPractica" /> Práctica
        @if (!string.IsNullOrEmpty(cargoError))
        {
            <div style="color: red;">@cargoError</div>
        }
    </div>

    <button type="submit">Guardar</button>
</EditForm>

@code {
    private DocenteCurso nuevoDocenteCurso = new DocenteCurso();
    private IEnumerable<Persona> personas;
    private IEnumerable<Curso> cursos;

    private bool isCargoTeoria;
    private bool isCargoPractica;
    private string cargoError; 

    protected override async Task OnInitializedAsync()
    {
        personas = (await DocenteCursosApi.GetDocentesAsync()).ToList();
        cursos = (await DocenteCursosApi.GetCursosAsync()).ToList();
    }

    private async Task HandleValidSubmit()
    {
        cargoError = ""; 

        if ((isCargoTeoria && isCargoPractica) || (!isCargoTeoria && !isCargoPractica))
        {
            cargoError = "Debe seleccionar solo un cargo: Teoría o Práctica.";
            return; 
        }

        UpdateCargo(); 

        await DocenteCursosApi.AddAsync(nuevoDocenteCurso);
        NavigationManager.NavigateTo("/docentecursos");
    }

    private void UpdateCargo()
    {
        if (isCargoTeoria)
        {
            nuevoDocenteCurso.Cargo = 1; 
        }
        else if (isCargoPractica)
        {
            nuevoDocenteCurso.Cargo = 2; 
        }
    }
}
