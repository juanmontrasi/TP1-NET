@page "/Home"

@inject UsuarioState UsuarioState
@inject NavigationManager NavigationManager
@using Entidades;
@using BlazorWeb.Servicios;

<h3>Asignar Cursos a Docentes</h3>

@if (!UsuarioState.IsAuthenticated())
{
    Console.WriteLine("Usuario no autenticado, redirigiendo a /login.");
    NavigationManager.NavigateTo("/login");
}
else if (isLoading)
{
    <p><em>Cargando...</em></p>
}
else if (!docenteCursos?.Any() ?? true && userRole == "Administrador") 
{
    <p>No hay cursos asignados.</p>

    <EditForm Model="nuevoDocenteCurso" OnValidSubmit="AgregarNuevoDocenteCurso" FormName="formHome">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div>
            <label>Docente:</label>
            <InputSelect @bind-Value="nuevoDocenteCurso.IdPersona">
                <option value="">Seleccione un docente</option>
                @foreach (var docente in docentes)
                {
                    <option value="@docente.IdPersona">@docente.Nombre_Usuario</option>
                }
            </InputSelect>
        </div>

        <div>
            <label>Curso:</label>
            <InputSelect @bind-Value="nuevoDocenteCurso.IdCurso">
                <option value="">Seleccione un curso</option>
                @foreach (var curso in cursos)
                {
                    <option value="@curso.IdCurso">@curso.Nombre</option>
                }
            </InputSelect>
        </div>

        <div>
            <label>Cargo:</label>
            <InputSelect @bind-Value="nuevoDocenteCurso.Cargo">
                <option value="">Seleccione un cargo</option>
                <option value="1">Teoría</option>
                <option value="2">Práctica</option>
            </InputSelect>
        </div>

        <button type="submit" class="btn btn-primary">Agregar Curso</button>
    </EditForm>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Docente</th>
                <th>Curso</th>
                <th>Cargo</th>
                @if (userRole == "Administrador")
                {
                    <th>Acciones</th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var docenteCurso in docenteCursos)
            {
                <tr>
                    <td>@docenteCurso.Persona.Apellido</td>
                    <td>@docenteCurso.Curso.Nombre</td>
                    <td>@(docenteCurso.Cargo == 1 ? "Teoría" : "Práctica")</td>
                    @if (userRole == "Administrador")
                    {
                        <td>
                            <button @onclick="() => EditDocenteCurso(docenteCurso)" class="btn btn-warning btn-sm">Editar</button>
                            <button @onclick="() => DeleteDocenteCurso(docenteCurso.IdDocenteCurso)" class="btn btn-danger btn-sm">Borrar</button>
                        </td>
                    }
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private IEnumerable<DocenteCurso> docenteCursos = Enumerable.Empty<DocenteCurso>();
    private IEnumerable<Usuario> docentes = Enumerable.Empty<Usuario>();
    private IEnumerable<Curso> cursos = Enumerable.Empty<Curso>();
    private string userRole;
    private DocenteCurso nuevoDocenteCurso = new DocenteCurso();
    private bool isLoading = true; 

    protected override async Task OnInitializedAsync()
    {
        
        if (!UsuarioState.IsAuthenticated())
        {
            Console.WriteLine("Usuario no autenticado, redirigiendo a /login.");
            NavigationManager.NavigateTo("/login");
            return;
        }

        userRole = UsuarioState.GetUserRole();
        Console.WriteLine($"Usuario autenticado: {UsuarioState.UsuarioActual.Nombre_Usuario}, Rol: {userRole}");

        
        try
        {
            docenteCursos = await DocenteCursosApi.GetDocenteCursoByIdAsync(UsuarioState.UsuarioActual.IdUsuario);
            if (userRole == "Administrador")
            {
                docentes = await DocenteCursosApi.GetDocentesAsync();
                cursos = await DocenteCursosApi.GetCursosAsync();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar datos: {ex.Message}");
        }
        finally
        {
            isLoading = false; 
        }
    }

    private async Task AgregarNuevoDocenteCurso()
    {
        if (nuevoDocenteCurso.IdPersona != 0 && nuevoDocenteCurso.IdCurso != 0 && nuevoDocenteCurso.Cargo != 0)
        {
            await DocenteCursosApi.AddAsync(nuevoDocenteCurso);
            NavigationManager.NavigateTo("/Home");
        }
        else
        {
            Console.WriteLine("Complete todos los campos antes de enviar.");
        }
    }

    private void EditDocenteCurso(DocenteCurso docenteCurso)
    {
        NavigationManager.NavigateTo($"/editar-docentecurso/{docenteCurso.IdDocenteCurso}");
    }

    private async Task DeleteDocenteCurso(int id)
    {
        await DocenteCursosApi.DeleteAsync(id);
        NavigationManager.NavigateTo("/Home");
    }
}
